// ✅ UNIFIED 5D DATABASE SCHEMA with Lowercase Platform Compatibility
// apps/api/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  tier      UserTier @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions Session[]
  apiKeys  ApiKey[]

  @@map("users")
}

model Session {
  id          String      @id @default(cuid())
  userId      String
  title       String?
  platform    Platform    @default(other)
  status      SessionStatus @default(ACTIVE)
  
  // ✅ ENHANCED: 5D Aggregated metrics for fast access
  messageCount    Int         @default(0)
  overallScore    Float       @default(0)
  strategicAvg    Float       @default(0)
  tacticalAvg     Float       @default(0)
  cognitiveAvg    Float       @default(0)
  innovationAvg   Float       @default(0)
  contextAvg      Float       @default(0)  // ✅ NEW: 5th dimension average
  
  // ✅ PRESERVED: Additional metrics
  bestScore       Float?
  worstScore      Float?
  trend           String?     // 'improving' | 'declining' | 'stable' | 'volatile'
  sessionDuration Int?        // minutes
  
  // ✅ ENHANCED: Parsing metadata
  parsingMethod     String?   // 'pattern' | 'haiku' | 'hybrid'
  parsingConfidence Float?    // 0.0 - 1.0
  parsingCost       Float?    // Cost in USD for AI parsing
  
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
  scores      Score[]
  patterns    Pattern[]
  insights    Insight[]

  @@map("sessions")
}

model Message {
  id        String   @id @default(cuid())
  sessionId String
  role      Role
  content   String   @db.Text
  timestamp DateTime?
  index     Int
  metadata  Json?
  createdAt DateTime @default(now())

  // Relations
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  score     Score?

  @@unique([sessionId, index])
  @@map("messages")
}

model Score {
  id          String   @id @default(cuid())
  messageId   String   @unique
  sessionId   String
  overall     Float
  strategic   Float
  tactical    Float
  cognitive   Float
  innovation  Float
  context     Float    // ✅ NEW: 5th dimension score
  classification String
  chessNotation  String
  confidence  Float
  explanation String?  @db.Text
  betterMove  String?  @db.Text
  
  // ✅ ENHANCED: Context analysis details
  temporalUnderstanding Float? // Component of context dimension
  stateAwareness       Float? // Component of context dimension
  redundancyPrevention Float? // Component of context dimension
  metaCommunication    Float? // Component of context dimension
  progressRecognition  Float? // Component of context dimension
  
  createdAt   DateTime @default(now())

  // Relations
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("scores")
}

model Pattern {
  id          String      @id @default(cuid())
  sessionId   String
  type        PatternType
  name        String
  startIndex  Int
  endIndex    Int
  confidence  Float
  description String      @db.Text
  metadata    Json?
  createdAt   DateTime    @default(now())

  // Relations
  session     Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("patterns")
}

model Insight {
  id          String      @id @default(cuid())
  sessionId   String
  type        InsightType
  title       String
  description String      @db.Text
  priority    Priority    @default(MEDIUM)
  actionable  Boolean     @default(false)
  metadata    Json?
  createdAt   DateTime    @default(now())

  // Relations
  session     Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("insights")
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  name      String
  key       String   @unique
  lastUsed  DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// ✅ ENHANCED: Analytics tables for 5D aggregated statistics
model DailyStats {
  id              String   @id @default(cuid())
  date            DateTime @unique
  totalSessions   Int      @default(0)
  totalMessages   Int      @default(0)
  avgScore        Float?
  activeUsers     Int      @default(0)
  
  // ✅ ENHANCED: 5D daily averages
  avgStrategic    Float?
  avgTactical     Float?
  avgCognitive    Float?
  avgInnovation   Float?
  avgContext      Float?   // ✅ NEW: 5th dimension daily average
  
  // ✅ ENHANCED: Parsing statistics
  patternParsingCount  Int  @default(0)
  haikuParsingCount    Int  @default(0)
  hybridParsingCount   Int  @default(0)
  totalParsingCost     Float @default(0)
  
  createdAt       DateTime @default(now())

  @@map("daily_stats")
}

model UserStats {
  id              String   @id @default(cuid())
  userId          String
  date            DateTime
  sessionsCount   Int      @default(0)
  messagesCount   Int      @default(0)
  avgScore        Float?
  bestScore       Float?
  worstScore      Float?
  
  // ✅ ENHANCED: 5D user averages
  avgStrategic    Float?
  avgTactical     Float?
  avgCognitive    Float?
  avgInnovation   Float?
  avgContext      Float?   // ✅ NEW: 5th dimension user average
  
  // ✅ ENHANCED: User parsing statistics
  parsingCostTotal Float   @default(0)
  preferredMethod  String? // Most used parsing method
  
  createdAt       DateTime @default(now())

  @@unique([userId, date])
  @@map("user_stats")
}

// ✅ NEW: Parsing Sessions for enhanced parsing workflow
model ParsingSession {
  id                String   @id @default(cuid())
  userId            String?  // Optional - allow anonymous parsing
  originalText      String   @db.Text
  
  // Parsing results
  method            String   // 'pattern' | 'haiku' | 'hybrid'
  confidence        Float
  messageCount      Int
  processingTime    Int      // milliseconds
  cost              Float    @default(0)
  
  // User interaction
  userSignature     String?
  needsVerification Boolean  @default(false)
  verified          Boolean  @default(false)
  
  // Learning data
  userPatterns      Json?    // Detected user-specific patterns
  improvements      Json?    // Suggested improvements
  
  // Relations to analysis
  analysisSessionId String?  // If proceeded to analysis
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("parsing_sessions")
}

// ✅ ENHANCED: Enums with unified lowercase platform values
enum UserTier {
  FREE
  PRO
  ENTERPRISE
}

// ✅ CRITICAL FIX: Platform enum with lowercase values for API compatibility
enum Platform {
  claude     // ✅ FIXED: lowercase for unified API compatibility
  chatgpt    // ✅ FIXED: lowercase for unified API compatibility  
  other      // ✅ FIXED: lowercase for unified API compatibility
  auto       // ✅ FIXED: lowercase for unified API compatibility
}

enum Role {
  USER
  ASSISTANT
  SYSTEM
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  DELETED
}

enum PatternType {
  MOMENTUM
  CIRCULAR
  FATIGUE
  BREAKTHROUGH
  DECLINE
  OSCILLATION
  CONTEXT_LOSS      // ✅ NEW: Context-related pattern
  TEMPORAL_CONFUSION // ✅ NEW: Temporal awareness issues
}

enum InsightType {
  IMPROVEMENT
  WARNING
  CELEBRATION
  SUGGESTION
  PATTERN
  CONTEXT_AWARENESS // ✅ NEW: Context-specific insights
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}