import React, { useState, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronDown, ChevronUp, User, Bot, Lightbulb, AlertTriangle } from 'lucide-react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import ScoreBadge from '@/components/common/ScoreBadge';
import { MessageAnalysisProps } from '@/types';
import { cn, getDimensionIcon, getDimensionColor, formatTimestamp } from '@/lib/utils';
import { useDisplaySettings } from '@/stores/settingsStore';

// ✅ MOVE DIMENSIONS TEMPLATE OUTSIDE COMPONENT - Prevent recreation
const DIMENSION_TEMPLATE = [
  { key: 'strategic', label: 'Strategic' },
  { key: 'tactical', label: 'Tactical' },
  { key: 'cognitive', label: 'Cognitive' },
  { key: 'innovation', label: 'Innovation' }
] as const;

const MessageAnalysis: React.FC<MessageAnalysisProps> = ({
  message,
  score,
  index,
  isExpanded = false,
  onToggle
}) => {
  // ✅ Simplified local state
  const [localExpanded, setLocalExpanded] = useState(isExpanded);
  
  // ✅ Single, stable settings subscription
  const displaySettings = useDisplaySettings((state) => ({
    compactMode: state.compactMode,
    animationsEnabled: state.animationsEnabled,
    autoExpandLowScores: state.autoExpandLowScores
  }));
  
  const { compactMode, animationsEnabled, autoExpandLowScores } = displaySettings;
  
  // ✅ Determine final expanded state
  const shouldAutoExpand = autoExpandLowScores && score.overall < 60;
  const finalExpanded = onToggle ? isExpanded : (shouldAutoExpand || localExpanded);
  
  // ✅ Stable toggle function
  const handleToggle = useCallback(() => {
    if (onToggle) {
      onToggle(index);
    } else {
      setLocalExpanded(prev => !prev);
    }
  }, [onToggle, index]);
  
  // ✅ Memoized role styling - prevent recalculation
  const roleStyles = useMemo(() => {
    const isUser = message.role === 'user';
    return {
      icon: isUser ? User : Bot,
      color: isUser ? 'text-blue-500' : 'text-green-500',
      bg: isUser ? 'bg-blue-50 dark:bg-blue-950/20' : 'bg-green-50 dark:bg-green-950/20'
    };
  }, [message.role]);
  
  // ✅ FIXED: Memoized dimensions using template + stable dependencies
  const dimensions = useMemo(() => {
    return DIMENSION_TEMPLATE.map(template => ({
      ...template,
      value: score.dimensions[template.key]
    }));
  }, [
    score.dimensions.strategic,
    score.dimensions.tactical,
    score.dimensions.cognitive,
    score.dimensions.innovation
  ]); // ✅ Explicit dependencies instead of entire object
  
  // ✅ FIXED: Render dimensions without inline .map() in JSX
  const dimensionElements = useMemo(() => {
    return dimensions.map(({ key, label, value }) => (
      <div key={key} className="space-y-1">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-1">
            <span className="text-sm">{getDimensionIcon(key)}</span>
            <span className="text-sm font-medium">{label}</span>
          </div>
          <ScoreBadge 
            score={value} 
            dimension={key as any}
            size="sm"
            animated={false}
          />
        </div>
        <Progress 
          value={value} 
          className="h-2"
        />
      </div>
    ));
  }, [dimensions]);
  
  // ✅ Memoized expanded content
  const expandedContent = useMemo(() => {
    if (!finalExpanded) return null;
    
    return (
      <motion.div
        initial={{ height: 0, opacity: 0 }}
        animate={{ height: 'auto', opacity: 1 }}
        exit={{ height: 0, opacity: 0 }}
        transition={{ duration: animationsEnabled ? 0.2 : 0 }}
        className="space-y-4"
      >
        {/* Dimension scores */}
        <div className="space-y-3">
          <h4 className="text-sm font-medium">Dimension Breakdown</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {dimensionElements}
          </div>
        </div>
        
        {/* Explanation */}
        {score.explanation && (
          <div className="space-y-2">
            <h4 className="text-sm font-medium">Analysis</h4>
            <p className="text-sm text-muted-foreground bg-muted/50 p-3 rounded-md">
              {score.explanation}
            </p>
          </div>
        )}
        
        {/* Better move suggestion */}
        {score.betterMove && (
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <Lightbulb className="h-4 w-4 text-yellow-500" />
              <h4 className="text-sm font-medium">Suggestion</h4>
            </div>
            <div className="bg-yellow-50 dark:bg-yellow-950/20 border border-yellow-200 dark:border-yellow-800 p-3 rounded-md">
              <p className="text-sm text-yellow-800 dark:text-yellow-200">
                {score.betterMove}
              </p>
            </div>
          </div>
        )}
        
        {/* Low score warning */}
        {score.overall < 40 && (
          <div className="flex items-start gap-2 bg-red-50 dark:bg-red-950/20 border border-red-200 dark:border-red-800 p-3 rounded-md">
            <AlertTriangle className="h-4 w-4 text-red-500 mt-0.5 flex-shrink-0" />
            <div className="text-sm text-red-800 dark:text-red-200">
              <p className="font-medium">Low Score Alert</p>
              <p>This message scored below average. Consider the suggestions above to improve future interactions.</p>
            </div>
          </div>
        )}
        
        {/* Metadata */}
        <div className="flex items-center justify-between text-xs text-muted-foreground pt-2 border-t">
          <div className="flex items-center gap-4">
            <span>Confidence: {Math.round(score.confidence * 100)}%</span>
            <span>Classification: {score.classification}</span>
          </div>
          <div>
            {message.content.length} characters
          </div>
        </div>
      </motion.div>
    );
  }, [finalExpanded, dimensionElements, score, animationsEnabled, message.content.length]);
  
  // ✅ Memoized card content
  const cardContent = useMemo(() => (
    <Card className={cn(
      "transition-all duration-200",
      finalExpanded && "ring-2 ring-blue-200 dark:ring-blue-800",
      compactMode && "p-2"
    )}>
      <CardContent className={cn("p-4", compactMode && "p-3")}>
        {/* Header */}
        <div className="flex items-start justify-between gap-3 mb-3">
          <div className="flex items-start gap-3 flex-1 min-w-0">
            <div className={cn(
              "flex items-center justify-center w-8 h-8 rounded-full",
              roleStyles.bg
            )}>
              {React.createElement(roleStyles.icon, { 
                className: cn("h-4 w-4", roleStyles.color) 
              })}
            </div>
            
            <div className="flex-1 min-w-0">
              <div className="flex items-center gap-2 mb-1">
                <span className="font-medium capitalize">{message.role}</span>
                <Badge variant="outline" className="text-xs">
                  #{index + 1}
                </Badge>
                {message.timestamp && (
                  <span className="text-xs text-muted-foreground">
                    {formatTimestamp(message.timestamp)}
                  </span>
                )}
              </div>
              
              <p className={cn(
                "text-sm text-muted-foreground line-clamp-2",
                finalExpanded && "line-clamp-none"
              )}>
                {message.content}
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-2 flex-shrink-0">
            <ScoreBadge 
              score={score.overall} 
              size={compactMode ? "sm" : "md"}
              animated={animationsEnabled}
            />
            
            <Button
              variant="ghost"
              size="sm"
              onClick={handleToggle}
              className="h-8 w-8 p-0"
            >
              {finalExpanded ? (
                <ChevronUp className="h-4 w-4" />
              ) : (
                <ChevronDown className="h-4 w-4" />
              )}
            </Button>
          </div>
        </div>
        
        {/* Expanded content */}
        <AnimatePresence>
          {expandedContent}
        </AnimatePresence>
      </CardContent>
    </Card>
  ), [
    finalExpanded, 
    compactMode, 
    roleStyles, 
    message, 
    index, 
    score.overall, 
    animationsEnabled, 
    handleToggle,
    expandedContent
  ]);
  
  // ✅ Conditional animation wrapper
  if (animationsEnabled) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ 
          duration: 0.3, 
          delay: index * 0.05,
          ease: "easeOut"
        }}
        layout
      >
        {cardContent}
      </motion.div>
    );
  }
  
  return cardContent;
};

export default MessageAnalysis;