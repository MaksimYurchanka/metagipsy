import React, { useState, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChevronDown, ChevronUp, User, Bot, Lightbulb, AlertTriangle, Brain } from 'lucide-react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import ScoreBadge from '@/components/common/ScoreBadge';
import { MessageAnalysisProps } from '@/types';
import { cn, getDimensionIcon, getDimensionColor, formatTimestamp } from '@/lib/utils';
import { 
  useCompactMode, 
  useAnimationsEnabled, 
  useAutoExpandLowScores 
} from '@/stores/settingsStore';

const MessageAnalysis: React.FC<MessageAnalysisProps> = ({
  message,
  score,
  index,
  isExpanded = false,
  onToggle
}) => {
  console.log(`üîç MESSAGE ANALYSIS 5D ${index}: Starting render...`);
  
  // ‚úÖ CRITICAL FIX 1: Local state for when no parent control
  const [localExpanded, setLocalExpanded] = useState(isExpanded);
  
  // ‚úÖ CRITICAL FIX 2: Individual stable selectors
  const compactMode = useCompactMode();
  const animationsEnabled = useAnimationsEnabled();
  const autoExpandLowScores = useAutoExpandLowScores();
  
  // ‚úÖ CRITICAL FIX 3: Determine final expanded state
  const shouldAutoExpand = autoExpandLowScores && score.overall < 60;
  const finalExpanded = onToggle ? isExpanded : (shouldAutoExpand || localExpanded);
  
  console.log(`‚úÖ MESSAGE ANALYSIS 5D ${index}: State determined, expanded:`, finalExpanded);
  
  // ‚úÖ CRITICAL FIX 4: STABLE toggle function with ZERO dependencies on onToggle!
  const handleToggle = useCallback(() => {
    console.log(`üîÑ MESSAGE ANALYSIS 5D ${index}: Toggle clicked`);
    if (onToggle) {
      onToggle(index);
    } else {
      setLocalExpanded(prev => !prev);
    }
  }, [index]); // ‚Üê REMOVED onToggle from dependencies! CRITICAL FIX!
  
  // ‚úÖ CRITICAL FIX 5: Memoized role styling (prevent recalculation)
  const roleStyles = useMemo(() => {
    const isUser = message.role === 'user';
    return {
      icon: isUser ? User : Bot,
      color: isUser ? 'text-blue-500' : 'text-green-500',
      bg: isUser ? 'bg-blue-50 dark:bg-blue-950/20' : 'bg-green-50 dark:bg-green-950/20'
    };
  }, [message.role]);
  
  // ‚úÖ ENHANCED: 5D dimensions array with Context support and custom styling!
  const dimensions = useMemo(() => {
    console.log(`üìä MESSAGE ANALYSIS 5D ${index}: Computing 5D dimensions`);
    return [
      { 
        key: 'strategic', 
        label: 'Strategic', 
        value: score.dimensions?.strategic || 0,
        icon: 'üéØ',
        color: 'text-purple-600',
        bgColor: 'bg-purple-50 dark:bg-purple-950/20',
        borderColor: 'border-purple-200 dark:border-purple-800'
      },
      { 
        key: 'tactical', 
        label: 'Tactical', 
        value: score.dimensions?.tactical || 0,
        icon: '‚ö°',
        color: 'text-blue-600',
        bgColor: 'bg-blue-50 dark:bg-blue-950/20',
        borderColor: 'border-blue-200 dark:border-blue-800'
      },
      { 
        key: 'cognitive', 
        label: 'Cognitive', 
        value: score.dimensions?.cognitive || 0,
        icon: 'üß†',
        color: 'text-green-600',
        bgColor: 'bg-green-50 dark:bg-green-950/20',
        borderColor: 'border-green-200 dark:border-green-800'
      },
      { 
        key: 'innovation', 
        label: 'Innovation', 
        value: score.dimensions?.innovation || 0,
        icon: 'üí°',
        color: 'text-yellow-600',
        bgColor: 'bg-yellow-50 dark:bg-yellow-950/20',
        borderColor: 'border-yellow-200 dark:border-yellow-800'
      },
      { 
        key: 'context', 
        label: 'Context', 
        value: score.dimensions?.context || 0,
        icon: 'üß≠', // ‚úÖ Navigation compass icon (not compose!)
        color: 'text-cyan-600',
        bgColor: 'bg-cyan-50 dark:bg-cyan-950/20',
        borderColor: 'border-cyan-200 dark:border-cyan-800',
        isNew: true // ‚úÖ Mark as new dimension
      }
    ];
  }, [score.dimensions, index]); // ‚Üê Stable dependencies
  
  // ‚úÖ NEW: Context dimension analysis
  const contextAnalysis = useMemo(() => {
    const contextScore = score.dimensions?.context || 0;
    if (contextScore === 0) {
      return {
        level: 'none',
        description: 'First message - no context available',
        color: 'text-gray-500'
      };
    } else if (contextScore <= 40) {
      return {
        level: 'limited',
        description: 'Basic temporal awareness',
        color: 'text-orange-600'
      };
    } else if (contextScore <= 70) {
      return {
        level: 'good',
        description: 'Strong context understanding',
        color: 'text-blue-600'
      };
    } else {
      return {
        level: 'excellent',
        description: 'Exceptional context mastery',
        color: 'text-green-600'
      };
    }
  }, [score.dimensions?.context]);
  
  // ‚úÖ CRITICAL FIX 7: Memoized expanded content (expensive computation)
  const expandedContent = useMemo(() => {
    console.log(`üèóÔ∏è MESSAGE ANALYSIS 5D ${index}: Building expanded content, show:`, finalExpanded);
    
    if (!finalExpanded) return null;
    
    return (
      <motion.div
        initial={{ height: 0, opacity: 0 }}
        animate={{ height: 'auto', opacity: 1 }}
        exit={{ height: 0, opacity: 0 }}
        transition={{ duration: animationsEnabled ? 0.2 : 0 }}
        className="space-y-4"
      >
        {/* 5D Dimension scores */}
        <div className="space-y-3">
          <h4 className="text-sm font-medium">5D Dimension Breakdown</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
            {dimensions.map(({ key, label, value, icon, color, bgColor, borderColor, isNew }) => (
              <div key={key} className={cn(
                "space-y-2 p-3 rounded-lg border transition-all duration-200",
                bgColor,
                borderColor,
                // ‚úÖ ENHANCED: Special styling for Context dimension
                isNew && "ring-2 ring-cyan-300 dark:ring-cyan-700 shadow-lg transform hover:scale-105"
              )}>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <span className="text-lg">{icon}</span>
                    <span className={cn("text-sm font-medium", color)}>
                      {label}
                      {/* ‚úÖ NEW badge for Context dimension */}
                      {isNew && (
                        <Badge variant="secondary" className="ml-2 text-xs bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-200">
                          NEW
                        </Badge>
                      )}
                    </span>
                  </div>
                  <ScoreBadge 
                    score={value} 
                    dimension={key as any}
                    size="sm"
                    animated={false}
                  />
                </div>
                <Progress 
                  value={value} 
                  className="h-2"
                />
                {/* ‚úÖ ENHANCED: Context dimension explanation */}
                {key === 'context' && (
                  <div className="mt-2 space-y-1">
                    <p className={cn("text-xs font-medium", contextAnalysis.color)}>
                      {contextAnalysis.level.toUpperCase()}: {contextAnalysis.description}
                    </p>
                    {value > 0 && (
                      <p className="text-xs text-muted-foreground">
                        Temporal understanding & state awareness
                      </p>
                    )}
                  </div>
                )}
                {/* Standard dimension explanations */}
                {key === 'strategic' && value > 70 && (
                  <p className="text-xs text-purple-600 dark:text-purple-400">
                    Strong goal alignment and strategic thinking
                  </p>
                )}
                {key === 'tactical' && value > 70 && (
                  <p className="text-xs text-blue-600 dark:text-blue-400">
                    Clear, specific, and actionable communication
                  </p>
                )}
                {key === 'cognitive' && value > 70 && (
                  <p className="text-xs text-green-600 dark:text-green-400">
                    Optimal timing and mental load management
                  </p>
                )}
                {key === 'innovation' && value > 70 && (
                  <p className="text-xs text-yellow-600 dark:text-yellow-400">
                    Creative and breakthrough-oriented thinking
                  </p>
                )}
              </div>
            ))}
          </div>
        </div>
        
        {/* ‚úÖ ENHANCED: Context Mastery section for high context scores */}
        {score.dimensions?.context && score.dimensions.context > 70 && (
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <span className="text-lg">üß≠</span>
              <h4 className="text-sm font-medium text-cyan-700 dark:text-cyan-300">Context Mastery</h4>
              <Badge variant="outline" className="text-xs border-cyan-300 text-cyan-700 dark:border-cyan-700 dark:text-cyan-300">
                EXCELLENT
              </Badge>
            </div>
            <div className="bg-cyan-50 dark:bg-cyan-950/20 border border-cyan-200 dark:border-cyan-800 p-3 rounded-md">
              <p className="text-sm text-cyan-800 dark:text-cyan-200">
                Exceptional temporal understanding and state awareness! This message demonstrates 
                strong context continuity with a score of <span className="font-bold">{Math.round(score.dimensions.context)}</span>.
                {score.dimensions.context > 85 && (
                  <span className="block mt-1 font-medium">
                    üèÜ This represents mastery-level context awareness!
                  </span>
                )}
              </p>
            </div>
          </div>
        )}
        
        {/* Explanation */}
        {score.explanation && (
          <div className="space-y-2">
            <h4 className="text-sm font-medium">Analysis</h4>
            <p className="text-sm text-muted-foreground bg-muted/50 p-3 rounded-md">
              {score.explanation}
            </p>
          </div>
        )}
        
        {/* Better move suggestion */}
        {score.betterMove && (
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <Lightbulb className="h-4 w-4 text-yellow-500" />
              <h4 className="text-sm font-medium">Suggestion</h4>
            </div>
            <div className="bg-yellow-50 dark:bg-yellow-950/20 border border-yellow-200 dark:border-yellow-800 p-3 rounded-md">
              <p className="text-sm text-yellow-800 dark:text-yellow-200">
                {score.betterMove}
              </p>
            </div>
          </div>
        )}
        
        {/* Low score warning */}
        {score.overall < 40 && (
          <div className="flex items-start gap-2 bg-red-50 dark:bg-red-950/20 border border-red-200 dark:border-red-800 p-3 rounded-md">
            <AlertTriangle className="h-4 w-4 text-red-500 mt-0.5 flex-shrink-0" />
            <div className="text-sm text-red-800 dark:text-red-200">
              <p className="font-medium">Low Score Alert</p>
              <p>This message scored below average. Consider the suggestions above to improve future interactions.</p>
            </div>
          </div>
        )}
        
        {/* ‚úÖ ENHANCED: Context insights for different score ranges */}
        {score.dimensions?.context && score.dimensions.context <= 40 && score.dimensions.context > 0 && (
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <span className="text-lg">üí°</span>
              <h4 className="text-sm font-medium text-orange-700 dark:text-orange-300">Context Improvement</h4>
            </div>
            <div className="bg-orange-50 dark:bg-orange-950/20 border border-orange-200 dark:border-orange-800 p-3 rounded-md">
              <p className="text-sm text-orange-800 dark:text-orange-200">
                <span className="font-medium">Limited context awareness detected.</span> Consider:
              </p>
              <ul className="mt-2 text-xs text-orange-700 dark:text-orange-300 space-y-1">
                <li>‚Ä¢ Reference previous discussion points</li>
                <li>‚Ä¢ Acknowledge completed tasks or decisions</li>
                <li>‚Ä¢ Show awareness of conversation timeline</li>
                <li>‚Ä¢ Build upon earlier established context</li>
              </ul>
            </div>
          </div>
        )}
        
        {/* Enhanced Metadata with 5D info */}
        <div className="flex items-center justify-between text-xs text-muted-foreground pt-2 border-t">
          <div className="flex items-center gap-4">
            <span>Confidence: {Math.round((score.confidence || 0) * 100)}%</span>
            <span>Classification: {score.classification}</span>
            {score.dimensions?.context !== undefined && (
              <span className="text-cyan-600 font-medium">
                Context: {Math.round(score.dimensions.context)}
              </span>
            )}
          </div>
          <div className="flex items-center gap-2">
            <span>{message.content.length} characters</span>
            {/* ‚úÖ 5D indicator */}
            <Badge variant="outline" className="text-xs bg-gradient-to-r from-purple-100 to-cyan-100 dark:from-purple-900 dark:to-cyan-900">
              5D Analysis
            </Badge>
          </div>
        </div>
      </motion.div>
    );
  }, [finalExpanded, dimensions, score, animationsEnabled, message.content.length, index, contextAnalysis]);
  
  // ‚úÖ CRITICAL FIX 8: Memoized card content (prevent unnecessary re-renders)
  const cardContent = useMemo(() => {
    console.log(`üèóÔ∏è MESSAGE ANALYSIS 5D ${index}: Building card content`);
    
    return (
      <Card className={cn(
        "transition-all duration-200",
        finalExpanded && "ring-2 ring-blue-200 dark:ring-blue-800",
        compactMode && "p-2",
        // ‚úÖ ENHANCED: Special styling for high context scores
        score.dimensions?.context && score.dimensions.context > 80 && 
        "shadow-lg border-cyan-200 dark:border-cyan-800"
      )}>
        <CardContent className={cn("p-4", compactMode && "p-3")}>
          {/* Header */}
          <div className="flex items-start justify-between gap-3 mb-3">
            <div className="flex items-start gap-3 flex-1 min-w-0">
              <div className={cn(
                "flex items-center justify-center w-8 h-8 rounded-full",
                roleStyles.bg
              )}>
                {React.createElement(roleStyles.icon, { 
                  className: cn("h-4 w-4", roleStyles.color) 
                })}
              </div>
              
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2 mb-1 flex-wrap">
                  <span className="font-medium capitalize">{message.role}</span>
                  <Badge variant="outline" className="text-xs">
                    #{index + 1}
                  </Badge>
                  {message.timestamp && (
                    <span className="text-xs text-muted-foreground">
                      {formatTimestamp(message.timestamp)}
                    </span>
                  )}
                  {/* ‚úÖ Enhanced 5D indicator with gradient */}
                  <Badge variant="secondary" className="text-xs bg-gradient-to-r from-purple-100 to-cyan-100 dark:from-purple-900 dark:to-cyan-900 border-0">
                    5D
                  </Badge>
                  {/* ‚úÖ Context excellence indicator */}
                  {score.dimensions?.context && score.dimensions.context > 85 && (
                    <Badge className="text-xs bg-cyan-500 text-white">
                      Context Master
                    </Badge>
                  )}
                </div>
                
                <p className={cn(
                  "text-sm text-muted-foreground line-clamp-2",
                  finalExpanded && "line-clamp-none"
                )}>
                  {message.content}
                </p>
              </div>
            </div>
            
            <div className="flex items-center gap-2 flex-shrink-0">
              <ScoreBadge 
                score={score.overall} 
                size={compactMode ? "sm" : "md"}
                animated={animationsEnabled}
              />
              
              {/* ‚úÖ ENHANCED: Context score badge with special styling */}
              {score.dimensions?.context && score.dimensions.context > 0 && (
                <ScoreBadge 
                  score={score.dimensions.context} 
                  dimension="context"
                  size="sm"
                  animated={animationsEnabled}
                  className={cn(
                    "ring-1 ring-cyan-300 dark:ring-cyan-700",
                    score.dimensions.context > 70 && "shadow-md"
                  )}
                />
              )}
              
              <Button
                variant="ghost"
                size="sm"
                onClick={handleToggle}
                className="h-8 w-8 p-0"
              >
                {finalExpanded ? (
                  <ChevronUp className="h-4 w-4" />
                ) : (
                  <ChevronDown className="h-4 w-4" />
                )}
              </Button>
            </div>
          </div>
          
          {/* Expanded content */}
          <AnimatePresence>
            {expandedContent}
          </AnimatePresence>
        </CardContent>
      </Card>
    );
  }, [
    finalExpanded, 
    compactMode, 
    roleStyles, 
    message, 
    index, 
    score.overall, 
    score.dimensions?.context,
    animationsEnabled, 
    handleToggle,
    expandedContent
  ]); // ‚Üê All dependencies are stable now!
  
  console.log(`‚úÖ MESSAGE ANALYSIS 5D ${index}: Render complete`);
  
  // ‚úÖ CRITICAL FIX 9: Conditional animation wrapper (stable logic)
  if (animationsEnabled) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ 
          duration: 0.3, 
          delay: index * 0.05,
          ease: "easeOut"
        }}
        layout
      >
        {cardContent}
      </motion.div>
    );
  }
  
  return cardContent;
};

export default MessageAnalysis;