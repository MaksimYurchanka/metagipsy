import React, { useState, useCallback } from 'react';
import { motion } from 'framer-motion';
import { Upload, Zap, Settings, AlertCircle, CheckCircle, Sparkles } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { ConversationInputProps, Platform } from '@/types';
import { 
  useAnalysisDepth, 
  usePatternDetection, 
  useClaudeAnalysis,
  useAutoDetectPlatform,
  useAnimationsEnabled 
} from '@/stores/settingsStore';
import { cn } from '@/lib/utils';

const ConversationInput: React.FC<ConversationInputProps> = ({
  onAnalyze,
  isAnalyzing = false
}) => {
  const [conversationText, setConversationText] = useState('');
  const [platform, setPlatform] = useState<Platform>('auto');
  const [sessionGoal, setSessionGoal] = useState('');
  const [projectContext, setProjectContext] = useState('');
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [detectedPlatform, setDetectedPlatform] = useState<Platform | null>(null);
  const [messageCount, setMessageCount] = useState(0);
  const [localClaudeEnabled, setLocalClaudeEnabled] = useState(true);
  
  // Settings from store
  const defaultAnalysisDepth = useAnalysisDepth();
  const enablePatternDetection = usePatternDetection();
  const enableClaudeAnalysis = useClaudeAnalysis();
  const autoDetectPlatform = useAutoDetectPlatform();
  const animationsEnabled = useAnimationsEnabled();
  
  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø platform detection - –¥–æ–±–∞–≤–∏–ª–∏ AI: recognition
  const analyzeText = useCallback((text: string) => {
    if (!text.trim()) {
      setDetectedPlatform(null);
      setMessageCount(0);
      return;
    }
    
    let detected: Platform = 'other';
    const content = text.toLowerCase();
    
    if (content.includes('human:') && content.includes('assistant:')) {
      detected = 'claude';
    } else if (content.includes('human:') && content.includes('ai:')) {
      detected = 'other'; // ‚úÖ Human: + AI: = other platform
    } else if (content.includes('user:') && (content.includes('chatgpt:') || content.includes('openai'))) {
      detected = 'chatgpt';
    } else if (content.includes('**user**') || content.includes('**assistant**')) {
      detected = 'chatgpt';
    } else if (content.match(/^(you|me|user|assistant|ai):/mi)) {
      detected = 'other';
    }
    
    setDetectedPlatform(detected);
    
    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô message counting - –¥–æ–±–∞–≤–∏–ª–∏ AI:
    const messageMarkers = text.match(/(Human:|Assistant:|User:|ChatGPT:|AI:|\*\*User\*\*|\*\*Assistant\*\*|^You:|^Me:|^User:|^Assistant:)/gmi);
    const alternatingBlocks = text.split(/\n\s*\n/).filter(block => block.trim().length > 10);
    
    const estimatedMessages = messageMarkers ? messageMarkers.length : Math.min(alternatingBlocks.length, Math.ceil(text.length / 200));
    setMessageCount(estimatedMessages);
  }, []);
  
  const handleTextChange = (value: string) => {
    setConversationText(value);
    analyzeText(value);
  };
  
  // ‚úÖ CRITICAL FIX: –£–±—Ä–∞–ª–∏ onAnalyze –∏–∑ dependencies –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è React Error #310
  const handleAnalyze = useCallback(async () => {
    if (!conversationText.trim()) return;
    
    // Parse conversation into messages
    const messages = parseConversation(
      conversationText, 
      platform === 'auto' ? detectedPlatform || 'other' : platform
    );
    
    if (messages.length < 2) {
      alert('Please provide at least 2 messages (one exchange) to analyze.');
      return;
    }
    
    // Prepare analysis request with Claude API enabled
    const analysisRequest = {
      conversation: {
        messages,
        platform: platform === 'auto' ? detectedPlatform || 'other' : platform
      },
      options: {
        useClaudeAnalysis: localClaudeEnabled && enableClaudeAnalysis,
        analysisDepth: defaultAnalysisDepth || 'standard',
        enablePatternDetection,
        generateSuggestions: true,
        detectPatterns: enablePatternDetection
      },
      metadata: {
        projectContext: projectContext.trim() || undefined,
        sessionGoal: sessionGoal.trim() || undefined,
        messageCount: messages.length,
        detectedPlatform,
        timestamp: new Date().toISOString()
      }
    };
    
    console.log('üöÄ Analyzing with Claude API:', {
      messageCount: messages.length,
      claudeEnabled: localClaudeEnabled && enableClaudeAnalysis,
      platform: platform === 'auto' ? detectedPlatform : platform
    });
    
    // Call the analysis function
    onAnalyze(analysisRequest);
  }, [
    conversationText, 
    platform, 
    detectedPlatform, 
    sessionGoal, 
    projectContext, 
    localClaudeEnabled,
    enableClaudeAnalysis,
    defaultAnalysisDepth,
    enablePatternDetection
    // ‚úÖ –£–ë–†–ê–õ–ò onAnalyze –∏–∑ dependencies!!! –≠–¢–û –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
  ]);
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê - –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É "AI:" –ø—Ä–µ—Ñ–∏–∫—Å–∞
  const parseConversation = (text: string, detectedPlatform: Platform) => {
    const messages: any[] = [];
    let parts: string[] = [];
    
    // Enhanced parsing for different platforms
    if (detectedPlatform === 'claude') {
      parts = text.split(/(?=(?:Human:|Assistant:))/i).filter(p => p.trim());
    } else if (detectedPlatform === 'chatgpt') {
      parts = text.split(/(?=(?:User:|ChatGPT:|\*\*User\*\*|\*\*Assistant\*\*))/i).filter(p => p.trim());
    } else {
      // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì –¥–ª—è 'other' platform
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ AI:, Human:, User:, Assistant: –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
      parts = text.split(/(?=(?:Human:|Assistant:|User:|AI:|You:|Me:))/i).filter(p => p.trim());
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º
      if (parts.length <= 1) {
        parts = text.split(/\n\s*\n/).filter(p => p.trim().length > 10);
      }
    }
    
    parts.forEach((part, index) => {
      const trimmed = part.trim();
      if (!trimmed) return;
      
      let role: 'user' | 'assistant' = 'user';
      let content = trimmed;
      
      // ‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø —Ä–æ–ª—å detection - –¥–æ–±–∞–≤–∏–ª–∏ AI:
      if (trimmed.match(/^(Human:|User:|\*\*User\*\*|You:)/i)) {
        role = 'user';
        content = trimmed.replace(/^(Human:|User:|\*\*User\*\*|You:)\s*/i, '').trim();
      } else if (trimmed.match(/^(Assistant:|ChatGPT:|AI:|\*\*Assistant\*\*|Me:)/i)) {
        role = 'assistant';
        content = trimmed.replace(/^(Assistant:|ChatGPT:|AI:|\*\*Assistant\*\*|Me:)\s*/i, '').trim();
      } else {
        // For untagged content, alternate roles starting with user
        role = index % 2 === 0 ? 'user' : 'assistant';
      }
      
      if (content.trim()) {
        messages.push({
          role,
          content: content.trim(),
          index: messages.length,
          timestamp: new Date(Date.now() - (parts.length - index) * 60000).toISOString()
        });
      }
    });
    
    return messages;
  };
  
  const canAnalyze = conversationText.trim().length > 50 && messageCount >= 2;
  const claudeAnalysisEnabled = localClaudeEnabled && enableClaudeAnalysis;
  
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Upload className="h-5 w-5" />
          Paste Your Conversation
          {claudeAnalysisEnabled && (
            <Badge variant="secondary" className="bg-purple-100 text-purple-700 border-purple-200">
              <Sparkles className="h-3 w-3 mr-1" />
              Claude AI
            </Badge>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Claude Analysis Toggle */}
        <motion.div 
          className="p-3 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg border border-purple-200"
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Sparkles className="h-4 w-4 text-purple-600" />
              <span className="font-medium text-purple-900">AI-Powered Analysis</span>
            </div>
            <Switch
              checked={localClaudeEnabled}
              onCheckedChange={setLocalClaudeEnabled}
              disabled={isAnalyzing}
            />
          </div>
          <p className="text-sm text-purple-700 mt-1">
            {claudeAnalysisEnabled 
              ? "Using Claude AI for sophisticated 4-dimension scoring"
              : "Using local analysis engine (faster but simpler)"
            }
          </p>
        </motion.div>
        
        {/* Main input area */}
        <div className="space-y-2">
          <Textarea
            placeholder="Paste your ChatGPT or Claude conversation here...

Example:
Human: I need help with my React project performance optimization
Assistant: I'd be happy to help optimize your React project! Let's start by identifying the main performance bottlenecks..."
            value={conversationText}
            onChange={(e) => handleTextChange(e.target.value)}
            className="min-h-[200px] resize-y font-mono text-sm"
            disabled={isAnalyzing}
          />
          
          {/* Status indicators */}
          <div className="flex items-center justify-between text-sm text-muted-foreground">
            <div className="flex items-center gap-4">
              {detectedPlatform && (
                <div className="flex items-center gap-1">
                  <CheckCircle className="h-4 w-4 text-green-500" />
                  <span className="capitalize">Detected: {detectedPlatform}</span>
                </div>
              )}
              {messageCount > 0 && (
                <Badge variant="secondary">
                  {messageCount} messages
                </Badge>
              )}
              {claudeAnalysisEnabled && (
                <Badge variant="outline" className="text-purple-600 border-purple-300">
                  AI Analysis Ready
                </Badge>
              )}
            </div>
            <div className={cn(
              conversationText.length > 8000 && "text-amber-600",
              conversationText.length > 9500 && "text-red-600"
            )}>
              {conversationText.length}/10000 characters
            </div>
          </div>
        </div>
        
        {/* Platform and goal selection */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="platform">Platform</Label>
            <Select value={platform} onValueChange={(value: Platform) => setPlatform(value)}>
              <SelectTrigger>
                <SelectValue placeholder="Select platform" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="auto">
                  üîç Auto-detect
                  {detectedPlatform && ` (${detectedPlatform})`}
                </SelectItem>
                <SelectItem value="claude">ü§ñ Claude</SelectItem>
                <SelectItem value="chatgpt">üí¨ ChatGPT</SelectItem>
                <SelectItem value="other">üìù Other</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="goal">Session Goal (Optional)</Label>
            <input
              id="goal"
              type="text"
              placeholder="e.g., Debug React component, Plan project architecture"
              value={sessionGoal}
              onChange={(e) => setSessionGoal(e.target.value)}
              className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              disabled={isAnalyzing}
            />
          </div>
        </div>
        
        {/* Advanced settings */}
        <div className="space-y-3">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setShowAdvanced(!showAdvanced)}
            className="flex items-center gap-2"
          >
            <Settings className="h-4 w-4" />
            Advanced Settings
          </Button>
          
          {showAdvanced && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: 'auto', opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="space-y-3 border-l-2 border-muted pl-4"
            >
              <div className="space-y-2">
                <Label htmlFor="context">Project Context (Optional)</Label>
                <Textarea
                  id="context"
                  placeholder="Describe your project, goals, or the context of this conversation to help the AI provide better analysis..."
                  value={projectContext}
                  onChange={(e) => setProjectContext(e.target.value)}
                  className="min-h-[80px]"
                  disabled={isAnalyzing}
                />
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex items-center space-x-2">
                  <Switch
                    id="pattern-detection"
                    checked={enablePatternDetection}
                    disabled={isAnalyzing}
                  />
                  <Label htmlFor="pattern-detection">Pattern Detection</Label>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="analysis-depth">Analysis Depth</Label>
                  <Select value={defaultAnalysisDepth} disabled={isAnalyzing}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="quick">‚ö° Quick</SelectItem>
                      <SelectItem value="standard">üéØ Standard</SelectItem>
                      <SelectItem value="deep">üîç Deep</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </motion.div>
          )}
        </div>
        
        {/* Analyze button */}
        <div className="flex flex-col gap-2">
          <Button
            onClick={handleAnalyze}
            disabled={!canAnalyze || isAnalyzing}
            className={cn(
              "w-full h-12 text-base font-semibold transition-all duration-200",
              canAnalyze && !isAnalyzing && claudeAnalysisEnabled && 
                "bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 shadow-lg hover:shadow-xl",
              canAnalyze && !isAnalyzing && !claudeAnalysisEnabled && 
                "bg-gradient-to-r from-gray-600 to-slate-600 hover:from-gray-700 hover:to-slate-700"
            )}
          >
            {isAnalyzing ? (
              <div className="flex items-center gap-2">
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                >
                  <Zap className="h-5 w-5" />
                </motion.div>
                {claudeAnalysisEnabled ? "AI Analyzing..." : "Analyzing..."}
              </div>
            ) : (
              <div className="flex items-center gap-2">
                {claudeAnalysisEnabled ? <Sparkles className="h-5 w-5" /> : <Zap className="h-5 w-5" />}
                {claudeAnalysisEnabled ? "Analyze with AI" : "Analyze Conversation"}
              </div>
            )}
          </Button>
          
          {!canAnalyze && conversationText.length > 0 && (
            <div className="flex items-center gap-2 text-sm text-amber-600">
              <AlertCircle className="h-4 w-4" />
              <span>
                {messageCount < 2 
                  ? "Need at least 2 messages to analyze (one conversation exchange)" 
                  : "Conversation too short (minimum 50 characters)"
                }
              </span>
            </div>
          )}
          
          {canAnalyze && claudeAnalysisEnabled && (
            <div className="text-center text-sm text-purple-600">
              ‚ú® Ready for AI-powered chess analysis with Claude
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default ConversationInput;