import React from 'react';
import { motion } from 'framer-motion';
import { cn, getScoreColor, getScoreBgColor, getChessNotation } from '@/lib/utils';
import { ScoreBadgeProps } from '@/types';
import { 
  useShowChessNotation, 
  useAnimationsEnabled 
} from '@/stores/settingsStore';

const ScoreBadge: React.FC<ScoreBadgeProps> = ({
  score,
  dimension = 'overall',
  size = 'md',
  animated = true,
  showNotation = true,
  className
}) => {
  console.log(`üè∑Ô∏è SCORE BADGE 5D: Rendering ${dimension} score:`, score);
  
  // ‚úÖ FIXED: Use individual selectors instead of useDisplaySettings
  const showChessNotation = useShowChessNotation();
  const animationsEnabled = useAnimationsEnabled();
  
  // ‚úÖ PRESERVE: Exact same logic as before
  const { symbol, name } = getChessNotation(score);
  
  const sizeClasses = {
    sm: 'h-6 px-2 text-xs',
    md: 'h-8 px-3 text-sm',
    lg: 'h-10 px-4 text-base'
  };
  
  // ‚úÖ CRITICAL NEW: Complete 5D dimension colors with Context support!
  const dimensionColors = {
    overall: getScoreBgColor(score),
    strategic: 'bg-purple-500',
    tactical: 'bg-blue-500',
    cognitive: 'bg-green-500',
    innovation: 'bg-yellow-500',
    context: 'bg-cyan-500' // ‚úÖ NEW: Context dimension color (navigation/awareness)
  };
  
  // ‚úÖ ENHANCED: Context-specific styling enhancements
  const contextEnhancements = dimension === 'context' ? {
    extraClasses: 'ring-1 ring-cyan-300 dark:ring-cyan-700',
    iconBefore: 'üß≠',
    tooltip: `Context Awareness: ${Math.round(score)}/100 - Temporal understanding & state awareness`
  } : {
    extraClasses: '',
    iconBefore: '',
    tooltip: `${name}: ${Math.round(score)}/100`
  };
  
  const bgColor = dimension === 'overall' ? dimensionColors.overall : dimensionColors[dimension];
  
  console.log(`‚úÖ SCORE BADGE 5D: Using color ${bgColor} for dimension ${dimension}`);
  
  const badgeContent = (
    <div
      className={cn(
        'inline-flex items-center justify-center rounded-full font-semibold text-white',
        sizeClasses[size],
        bgColor,
        'shadow-sm border border-white/20',
        contextEnhancements.extraClasses, // ‚úÖ Context-specific enhancements
        className
      )}
    >
      {/* ‚úÖ NEW: Context icon prefix for context dimension */}
      {contextEnhancements.iconBefore && (
        <span className="mr-1 text-xs">{contextEnhancements.iconBefore}</span>
      )}
      
      <span className="mr-1">{Math.round(score)}</span>
      
      {showNotation && showChessNotation && (
        <span className="text-xs opacity-90">{symbol}</span>
      )}
    </div>
  );
  
  if (animated && animationsEnabled) {
    return (
      <motion.div
        initial={{ scale: 0, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ 
          type: "spring", 
          stiffness: 300, 
          damping: 20,
          delay: dimension === 'context' ? 0.2 : 0.1 // ‚úÖ Slight delay for context (newest)
        }}
        whileHover={{ 
          scale: 1.05,
          ...(dimension === 'context' && { rotate: [0, -2, 2, 0] }) // ‚úÖ Special context hover effect
        }}
        whileTap={{ scale: 0.95 }}
        title={contextEnhancements.tooltip}
      >
        {badgeContent}
      </motion.div>
    );
  }
  
  return (
    <div title={contextEnhancements.tooltip}>
      {badgeContent}
    </div>
  );
};

export default ScoreBadge;