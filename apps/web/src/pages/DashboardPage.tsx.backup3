import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { toast } from 'sonner';
import { useAuth } from '@/hooks/useAuth';
import { api } from '@/lib/api';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  BarChart3, 
  TrendingUp, 
  Calendar, 
  Target, 
  Trophy,
  Download,
  Trash2,
  Eye,
  Loader2
} from 'lucide-react';

interface SessionData {
  id: string;
  title?: string;
  platform: string;
  messageCount: number;
  overallScore: number;
  strategicAvg: number;
  tacticalAvg: number;
  cognitiveAvg: number;
  innovationAvg: number;
  trend?: 'improving' | 'declining' | 'stable' | 'volatile';
  createdAt: string;
  projectContext?: string;
  sessionGoal?: string;
}

interface AnalyticsData {
  totalSessions: number;
  totalMessages: number;
  averageScore: number;
  improvementRate: number;
  dimensionAverages: {
    strategic: number;
    tactical: number;
    cognitive: number;
    innovation: number;
  };
  trendDistribution: Record<string, number>;
  platformDistribution: Record<string, number>;
  scoreHistory: Array<{
    date: string;
    score: number;
  }>;
}

const DashboardPage: React.FC = () => {
  const { user, isAuthenticated } = useAuth();
  const [sessions, setSessions] = useState<SessionData[]>([]);
  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (isAuthenticated && user) {
      fetchDashboardData();
    }
  }, [isAuthenticated, user]);

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Fetch user sessions and analytics in parallel
      const [sessionsResponse, analyticsResponse] = await Promise.all([
        api.getUserSessions(user?.id, 1, 20), // First 20 sessions
        api.getUserAnalytics(30) // Last 30 days
      ]);

      setSessions(sessionsResponse.sessions || []);
      setAnalytics(analyticsResponse);

      console.log('✅ Dashboard data loaded:', {
        sessionsCount: sessionsResponse.sessions?.length || 0,
        analytics: analyticsResponse
      });

    } catch (error) {
      console.error('❌ Failed to load dashboard data:', error);
      setError('Failed to load dashboard data. Please try again.');
      toast.error('Failed to load dashboard data');
    } finally {
      setLoading(false);
    }
  };

  const deleteSession = async (sessionId: string) => {
    try {
      await api.deleteSession(sessionId);
      setSessions(prev => prev.filter(s => s.id !== sessionId));
      toast.success('Session deleted successfully');
      
      // Refresh analytics after deletion
      fetchDashboardData();
    } catch (error) {
      console.error('Failed to delete session:', error);
      toast.error('Failed to delete session');
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600 bg-green-50 border-green-200';
    if (score >= 70) return 'text-blue-600 bg-blue-50 border-blue-200';
    if (score >= 60) return 'text-yellow-600 bg-yellow-50 border-yellow-200';
    if (score >= 40) return 'text-orange-600 bg-orange-50 border-orange-200';
    return 'text-red-600 bg-red-50 border-red-200';
  };

  const getScoreLabel = (score: number) => {
    if (score >= 80) return 'Brilliant';
    if (score >= 70) return 'Excellent';
    if (score >= 60) return 'Good';
    if (score >= 40) return 'Average';
    return 'Needs Work';
  };

  const getTrendIcon = (trend?: string) => {
    switch (trend) {
      case 'improving':
        return <TrendingUp className="w-4 h-4 text-green-500" />;
      case 'declining':
        return <TrendingUp className="w-4 h-4 text-red-500 rotate-180" />;
      case 'volatile':
        return <BarChart3 className="w-4 h-4 text-orange-500" />;
      default:
        return <Target className="w-4 h-4 text-blue-500" />;
    }
  };

  // ✅ CRITICAL FIX: Safe dimension analysis with null checks
  const getBestDimension = () => {
    if (!analytics?.dimensionAverages || typeof analytics.dimensionAverages !== 'object') {
      return { name: 'Strategic', score: 0 };
    }

    try {
      const entries = Object.entries(analytics.dimensionAverages);
      if (entries.length === 0) {
        return { name: 'Strategic', score: 0 };
      }

      const sortedEntries = entries.sort(([,a], [,b]) => (b || 0) - (a || 0));
      const bestEntry = sortedEntries[0];
      
      if (!bestEntry || !bestEntry[0]) {
        return { name: 'Strategic', score: 0 };
      }

      const dimensionName = bestEntry[0].charAt(0).toUpperCase() + bestEntry[0].slice(1);
      const score = bestEntry[1] || 0;

      return { name: dimensionName, score: Math.round(score) };
    } catch (error) {
      console.error('❌ Error calculating best dimension:', error);
      return { name: 'Strategic', score: 0 };
    }
  };

  // ✅ SAFE: Get dimension averages with fallback
  const getDimensionAverages = () => {
    if (!analytics?.dimensionAverages || typeof analytics.dimensionAverages !== 'object') {
      return {
        strategic: 0,
        tactical: 0,
        cognitive: 0,
        innovation: 0
      };
    }

    return {
      strategic: analytics.dimensionAverages.strategic || 0,
      tactical: analytics.dimensionAverages.tactical || 0,
      cognitive: analytics.dimensionAverages.cognitive || 0,
      innovation: analytics.dimensionAverages.innovation || 0
    };
  };

  if (!isAuthenticated) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Card className="p-8 text-center">
          <CardContent>
            <h2 className="text-xl font-bold mb-4">Please log in to view your dashboard</h2>
            <Button onClick={() => window.location.href = '/analyze'}>
              Go to Analysis
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center space-y-4">
          <Loader2 className="w-8 h-8 animate-spin mx-auto" />
          <p className="text-muted-foreground">Loading your dashboard...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Card className="p-8 text-center">
          <CardContent>
            <h2 className="text-xl font-bold mb-4 text-red-600">Error Loading Dashboard</h2>
            <p className="text-muted-foreground mb-4">{error}</p>
            <Button onClick={fetchDashboardData}>Try Again</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  // ✅ Get safe values
  const bestDimension = getBestDimension();
  const dimensionAverages = getDimensionAverages();

  return (
    <div className="max-w-7xl mx-auto space-y-8">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="space-y-4"
      >
        <h1 className="text-4xl font-bold">Your Analysis Dashboard</h1>
        <p className="text-xl text-muted-foreground">
          Track your AI conversation improvement journey
        </p>
        
        <div className="flex items-center gap-2 text-sm text-green-600">
          <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
          Welcome back, {user?.email}!
        </div>
      </motion.div>

      {/* Analytics Overview */}
      {analytics && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"
        >
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Analyses</CardTitle>
              <BarChart3 className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{analytics.totalSessions || 0}</div>
              <p className="text-xs text-muted-foreground">
                {analytics.totalMessages || 0} total messages analyzed
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Average Score</CardTitle>
              <Target className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{analytics.averageScore || 0}</div>
              <p className="text-xs text-muted-foreground">
                {getScoreLabel(analytics.averageScore || 0)} performance
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Improvement Rate</CardTitle>
              <TrendingUp className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {(analytics.improvementRate || 0) > 0 ? '+' : ''}{analytics.improvementRate || 0}%
              </div>
              <p className="text-xs text-muted-foreground">
                vs previous period
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Best Dimension</CardTitle>
              <Trophy className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {bestDimension.name}
              </div>
              <p className="text-xs text-muted-foreground">
                {bestDimension.score} average
              </p>
            </CardContent>
          </Card>
        </motion.div>
      )}

      {/* Dimension Breakdown */}
      {analytics && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          <Card>
            <CardHeader>
              <CardTitle>Skill Dimensions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {Object.entries(dimensionAverages).map(([dimension, score]) => (
                <div key={dimension} className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="capitalize font-medium">{dimension}</span>
                    <span className="text-muted-foreground">{Math.round(score || 0)}/100</span>
                  </div>
                  <Progress value={score || 0} className="h-2" />
                </div>
              ))}
            </CardContent>
          </Card>
        </motion.div>
      )}

      {/* Session History */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
      >
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              Recent Analyses
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => window.location.href = '/analyze'}
              >
                New Analysis
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {sessions.length === 0 ? (
              <div className="text-center py-12">
                <BarChart3 className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-medium mb-2">No analyses yet</h3>
                <p className="text-muted-foreground mb-4">
                  Start analyzing your AI conversations to see insights here
                </p>
                <Button onClick={() => window.location.href = '/analyze'}>
                  Start Your First Analysis
                </Button>
              </div>
            ) : (
              <div className="space-y-4">
                {sessions.map((session) => (
                  <div
                    key={session.id}
                    className="border rounded-lg p-4 hover:bg-accent/50 transition-colors"
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex-1 space-y-2">
                        <div className="flex items-center gap-3">
                          <h3 className="font-medium truncate">
                            {session.title || `${session.platform} Analysis`}
                          </h3>
                          <Badge variant="outline" className="text-xs">
                            {session.platform}
                          </Badge>
                          {getTrendIcon(session.trend)}
                        </div>
                        
                        <div className="flex items-center gap-4 text-sm text-muted-foreground">
                          <span>{session.messageCount} messages</span>
                          <span>•</span>
                          <span>{new Date(session.createdAt).toLocaleDateString()}</span>
                          {session.projectContext && (
                            <>
                              <span>•</span>
                              <span className="truncate max-w-xs">{session.projectContext}</span>
                            </>
                          )}
                        </div>
                        
                        <div className="flex items-center gap-4">
                          <Badge 
                            className={`${getScoreColor(session.overallScore)} border`}
                          >
                            {session.overallScore}/100
                          </Badge>
                          <div className="text-xs text-muted-foreground">
                            S:{Math.round(session.strategicAvg)} T:{Math.round(session.tacticalAvg)} C:{Math.round(session.cognitiveAvg)} I:{Math.round(session.innovationAvg)}
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => window.open(`/sessions/${session.id}`, '_blank')}
                        >
                          <Eye className="w-4 h-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            const url = `${api.baseUrl}/sessions/${session.id}/export?format=json`;
                            window.open(url, '_blank');
                          }}
                        >
                          <Download className="w-4 h-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => {
                            if (confirm('Are you sure you want to delete this session?')) {
                              deleteSession(session.id);
                            }
                          }}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
                
                {sessions.length >= 20 && (
                  <div className="text-center pt-4">
                    <Button 
                      variant="outline"
                      onClick={() => {
                        // TODO: Implement pagination
                        toast.info('Pagination coming soon!');
                      }}
                    >
                      Load More Sessions
                    </Button>
                  </div>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      </motion.div>

      {/* Quick Actions */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.4 }}
        className="grid grid-cols-1 md:grid-cols-3 gap-6"
      >
        <Card className="cursor-pointer hover:shadow-md transition-shadow" 
              onClick={() => window.location.href = '/analyze'}>
          <CardHeader>
            <CardTitle className="text-lg">New Analysis</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-muted-foreground mb-4">
              Analyze a new AI conversation and get chess-style scoring
            </p>
            <Button className="w-full">Start Analysis</Button>
          </CardContent>
        </Card>

        <Card className="cursor-pointer hover:shadow-md transition-shadow">
          <CardHeader>
            <CardTitle className="text-lg">Export Data</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-muted-foreground mb-4">
              Download your analysis data in various formats
            </p>
            <Button 
              variant="outline" 
              className="w-full"
              onClick={() => toast.info('Bulk export coming soon!')}
            >
              Export All
            </Button>
          </CardContent>
        </Card>

        <Card className="cursor-pointer hover:shadow-md transition-shadow">
          <CardHeader>
            <CardTitle className="text-lg">Settings</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-muted-foreground mb-4">
              Customize your analysis preferences and notifications
            </p>
            <Button 
              variant="outline" 
              className="w-full"
              onClick={() => window.location.href = '/settings'}
            >
              Open Settings
            </Button>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
};

export default DashboardPage;