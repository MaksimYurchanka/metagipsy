import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router, Routes, Route, useLocation } from 'react-router-dom';
import { Toaster } from 'sonner';
import { initializeTheme } from '@/stores/settingsStore';
import Layout from '@/components/layout/Layout';
import { ProtectedRoute } from '@/components/auth/ProtectedRoute';
import SEOOptimization from '@/components/SEOOptimization';
import HomePage from '@/pages/HomePage';
import AnalysisPage from '@/pages/AnalysisPage';
import VerifyPage from '@/pages/VerifyPage';
import ResultsPage from '@/pages/ResultsPage';
import DashboardPage from '@/pages/DashboardPage';
import SettingsPage from '@/pages/SettingsPage';
import PricingPage from '@/pages/PricingPage';
import { AuthCallbackPage } from '@/pages/AuthCallbackPage';

// üéØ MetaGipsy App.tsx - Updated July 19, 2025
// Production-ready with SEO integration, React 19 compatibility, and complete pricing system
// Optimized for dark theme consistency and professional UX

// üéØ Types for SEO data
interface SessionData {
  sessionId?: string;
  overallScore?: number;
  messageCount?: number;
  platform?: string;
}

type PageType = 'homepage' | 'analysis' | 'verify' | 'results' | 'dashboard' | 'settings' | 'pricing';
type AnalysisType = 'claude' | 'chatgpt' | 'general' | null;

// üîç Hook to determine current page type from URL
const usePageType = (): PageType => {
  const location = useLocation();
  
  if (location.pathname === '/') return 'homepage';
  if (location.pathname === '/analyze') return 'analysis';
  if (location.pathname === '/analyze/verify') return 'verify';
  if (location.pathname.startsWith('/analyze/results')) return 'results';
  if (location.pathname === '/dashboard') return 'dashboard';
  if (location.pathname === '/settings') return 'settings';
  if (location.pathname === '/pricing') return 'pricing';
  
  return 'homepage'; // fallback
};

// üìä Main App Content with SEO Integration
const AppContent: React.FC = () => {
  const pageType = usePageType();
  const [sessionData, setSessionData] = useState<SessionData | null>(null);
  const [analysisType, setAnalysisType] = useState<AnalysisType>(null);

  // üéØ Listen for session data updates from analysis results
  useEffect(() => {
    const handleSessionUpdate = (event: CustomEvent<SessionData>) => {
      setSessionData(event.detail);
      console.log('üìä SEO: Session data updated:', event.detail);
    };

    const handleAnalysisTypeUpdate = (event: CustomEvent<AnalysisType>) => {
      setAnalysisType(event.detail);
      console.log('üéØ SEO: Analysis type updated:', event.detail);
    };

    // Listen for custom events from pages
    window.addEventListener('metagipsy-session-update', handleSessionUpdate as EventListener);
    window.addEventListener('metagipsy-analysis-type-update', handleAnalysisTypeUpdate as EventListener);

    return () => {
      window.removeEventListener('metagipsy-session-update', handleSessionUpdate as EventListener);
      window.removeEventListener('metagipsy-analysis-type-update', handleAnalysisTypeUpdate as EventListener);
    };
  }, []);

  // üîÑ Clear session data when navigating away from results
  useEffect(() => {
    if (pageType !== 'results') {
      setSessionData(null);
    }
  }, [pageType]);

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100">
      {/* üìà SEO Optimization Component */}
      <SEOOptimization 
        pageType={pageType}
        analysisType={analysisType}
        sessionData={sessionData}
      />
      
      <Routes>
        {/* ‚úÖ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ú–ê–†–®–†–£–¢: Auth Callback - –ë–ï–ó Layout */}
        <Route path="/auth/callback" element={<AuthCallbackPage />} />
        
        {/* ‚úÖ –û–ë–´–ß–ù–´–ï –ú–ê–†–®–†–£–¢–´: –° Layout */}
        <Route path="/*" element={
          <Layout>
            <Routes>
              {/* ‚úÖ –ü–£–ë–õ–ò–ß–ù–´–ï –°–¢–†–ê–ù–ò–¶–´ - –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º */}
              <Route path="/" element={<HomePage />} />
              <Route path="/pricing" element={<PricingPage />} />
              
              {/* ‚úÖ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó WORKFLOW - –≤—Å–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ */}
              <Route 
                path="/analyze" 
                element={
                  <ProtectedRoute>
                    <AnalysisPage />
                  </ProtectedRoute>
                } 
              />
              <Route 
                path="/analyze/verify" 
                element={
                  <ProtectedRoute>
                    <VerifyPage />
                  </ProtectedRoute>
                } 
              />
              <Route 
                path="/analyze/results/:sessionId" 
                element={
                  <ProtectedRoute>
                    <ResultsPage />
                  </ProtectedRoute>
                } 
              />
              
              {/* ‚úÖ –û–°–¢–ê–õ–¨–ù–´–ï –ó–ê–©–ò–©–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´ */}
              <Route 
                path="/dashboard" 
                element={
                  <ProtectedRoute>
                    <DashboardPage />
                  </ProtectedRoute>
                } 
              />
              <Route 
                path="/settings" 
                element={
                  <ProtectedRoute>
                    <SettingsPage />
                  </ProtectedRoute>
                } 
              />
            </Routes>
          </Layout>
        } />
      </Routes>
      
      {/* ‚úÖ TOASTER CONFIGURATION - Dark theme optimized */}
      <Toaster 
        position="bottom-right"
        toastOptions={{
          duration: 4000,
          style: {
            background: '#1f2937', // gray-800 for dark theme consistency
            color: '#f9fafb', // gray-50 for light text
            border: '1px solid #374151', // gray-700 for subtle border
            borderRadius: '0.5rem',
            boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2)',
          },
          className: 'dark-toast',
        }}
        theme="dark"
        richColors
      />
    </div>
  );
};

// üöÄ Main App Component
function App() {
  useEffect(() => {
    // Initialize theme on app start - force dark theme
    initializeTheme();
    
    // üåô Force dark theme for consistency
    document.documentElement.classList.add('dark');
    document.body.className = 'bg-gray-900 text-gray-100 antialiased';
    
    // üìä Initialize SEO when app starts
    console.log('üöÄ MetaGipsy App initialized with dark theme SEO optimization');
    
    // üí≥ Initialize payment system readiness
    console.log('üí≥ Payment system ready - Stripe integration operational');
    
    // üìà Analytics initialization
    if (typeof gtag !== 'undefined') {
      gtag('event', 'app_initialization', {
        event_category: 'System',
        event_label: 'App Started',
        value: 1,
        custom_map: {
          theme: 'dark',
          version: '1.0.0',
          features: '5D_Analysis_Context_Payments'
        }
      });
    }
  }, []);

  // üéØ Global dark theme styles enforcement
  useEffect(() => {
    // Ensure dark theme persistence across navigation
    const enforceTheme = () => {
      document.documentElement.classList.add('dark');
      document.body.style.backgroundColor = '#111827'; // gray-900
      document.body.style.color = '#f9fafb'; // gray-50
    };

    enforceTheme();
    
    // Listen for any theme changes and maintain dark
    const observer = new MutationObserver(enforceTheme);
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });

    return () => observer.disconnect();
  }, []);

  return (
    <Router>
      <AppContent />
    </Router>
  );
}

export default App;

// üìã UTILITY FUNCTIONS FOR PAGES TO TRIGGER SEO UPDATES

// üéØ Function for pages to update session data for SEO
export const updateSEOSessionData = (sessionData: SessionData): void => {
  const event = new CustomEvent('metagipsy-session-update', { 
    detail: sessionData 
  });
  window.dispatchEvent(event);
};

// üéØ Function for pages to update analysis type for SEO  
export const updateSEOAnalysisType = (analysisType: AnalysisType): void => {
  const event = new CustomEvent('metagipsy-analysis-type-update', { 
    detail: analysisType 
  });
  window.dispatchEvent(event);
};

// üìã DARK THEME UTILITY FUNCTIONS

// üåô Function to ensure dark theme consistency
export const enforceDarkTheme = (): void => {
  document.documentElement.classList.add('dark');
  document.body.className = 'bg-gray-900 text-gray-100 antialiased';
  
  // Store theme preference
  localStorage.setItem('metagipsy-theme', 'dark');
  
  console.log('üåô Dark theme enforced for optimal UX');
};

// üí≥ Function for payment success analytics
export const trackPaymentEvent = (eventType: string, planName: string, amount?: number): void => {
  if (typeof gtag !== 'undefined') {
    gtag('event', eventType, {
      event_category: 'Revenue',
      event_label: planName,
      value: amount || 0,
      custom_map: {
        plan_type: planName,
        currency: 'USD',
        payment_method: 'stripe'
      }
    });
  }
  
  console.log(`üí≥ Payment event tracked: ${eventType} - ${planName}`);
};

// üìã USAGE EXAMPLES FOR OTHER COMPONENTS:

/*
// üéØ In ResultsPage.tsx - Update SEO with session data
import { updateSEOSessionData } from '@/App';

useEffect(() => {
  if (sessionData) {
    updateSEOSessionData({
      sessionId: sessionData.id,
      overallScore: sessionData.overallScore,
      messageCount: sessionData.messageCount,
      platform: sessionData.platform
    });
  }
}, [sessionData]);

// üéØ In AnalysisPage.tsx - Update SEO with analysis type
import { updateSEOAnalysisType } from '@/App';

useEffect(() => {
  // When user selects analysis type or it's detected
  if (detectedPlatform === 'claude') {
    updateSEOAnalysisType('claude');
  } else if (detectedPlatform === 'chatgpt') {
    updateSEOAnalysisType('chatgpt');
  }
}, [detectedPlatform]);

// üéØ In PricingPage.tsx - Track payment events
import { trackPaymentEvent } from '@/App';

const handlePaymentSuccess = (planName: string, amount: number) => {
  trackPaymentEvent('purchase', planName, amount);
};

// üåô In any component - Enforce dark theme
import { enforceDarkTheme } from '@/App';

useEffect(() => {
  enforceDarkTheme();
}, []);
*/

// üéØ DARK THEME STYLES FOR COMPONENTS:
/*
Consistent dark theme classes to use across components:

Backgrounds:
- bg-gray-900 (darkest - main background)
- bg-gray-800 (dark - cards, sidebars)
- bg-gray-700 (medium - borders, dividers)

Text:
- text-gray-100 (lightest - primary text)
- text-gray-300 (light - secondary text)
- text-gray-400 (medium - muted text)

Accents:
- Purple: from-purple-600 to-blue-600
- Blue: bg-blue-600, text-blue-400
- Green: bg-green-600, text-green-400
- Red: bg-red-600, text-red-400

Borders:
- border-gray-700 (subtle)
- border-gray-600 (visible)
- border-purple-500 (accent)
*/